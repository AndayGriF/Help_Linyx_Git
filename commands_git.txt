______________________________________________________________________________
 				GitConfig
______________________________________________________________________________
git config --global user.name "[NAME]"  :-Логин   
git config --global user.email "[email addres]"
git config --global color.ui auto   :-подсветка GIT при использоании терминала
git config --global core.editor "[program]"     :-Установка редактора по умолчанию!
git config --list       :-Вывод списка конфигураций.
______________________________________________________________________________
git init:- создаёт пустой репозит в тек папке.
git status:- определяет текущее состояние репозита.
git remote add origin https://ссылка/:-Добавляет удылённый исочник данных, origin в большинстве случаев так называются удвлённые источники.
git remote -v:-покажет список подключеных соединений.
git add имя_файла:-Добавить файл к юудущему комиту.
git abb . :- инициализировать все в тек. директ.
git restore --staged имя_файла:-снимает инициализацию.
git commit:-Записать комит с редактором.
git commit -m 'сообщение комита':-Записать комит с сообщением без редактора.
git commit -a:- Это git add и git commit в одной команде.
touch имяпапки/.gitkeep:-создание системного файла чтобы git распознавал пустую директорию.
.gitignore:- Скрыть.
git log:-получить доступ к истории репозита.
git log --oneline:-получить доступ к истории репозита в более компактном виде.
git reflog:- получить доступ к истории репозита с отменёнными комитами.
git reset хэш:- перейти по истории лога.
git revert хэш:-создаёт коммит который отменяет действия совершенные в предидущем.
git branch:-просмотр веток в репозите.
git branch имя_ветки:-создание новой ветки.
git branch -d имя_ветки:-удаление ветки. 
git checkout имя_ветки:-переход на другую веткую. 
git checkout -b имя_ветки с созданием.
git merge dev:- слить ветки, где 'dev' это вливаемая ветка в текушую.
git rebase master:-Перенос точки создания ветки.
__________________________________________________________________________________
                              Управления версиями.
__________________________________________________________________________________
git tag имя_версии:-присвоить версию репозиту.
git tag:-Просмотр текушую версию репозита.
git tag --list:-Просмотр версий репозита.
git push --tags:-Загрузуть в уд.Репозит ТэГ.
git tag -d имя_ТэГ:-Удалить метку(ТэГ).
git push --delete origin имя_ТэГ:-Удалить метку(ТэГ) Удалённо.
___________________________________________________________________________________
                                   GitStash
___________________________________________________________________________________
git stash:-Выгрузить ищминения в stash.
git stash push <file>:-Добавить файл в stash.
git stash pop:-Применить изменения из stash.
git stash list:-Посмотреть список stash.
______________________________________________________________________________
                                     GitSquash
______________________________________________________________________________
git merge <branch> --squash:-перенос изменений через squash.
git rebase -i HEAD~X:-Склеить Х коммитов.
___________________________________________________________________________________
                             Синхронизаций по SSH GitHub
___________________________________________________________________________________

export GIT_SSH_COMMAND="ssh -i /Путь к ключу(без .pab):-Переключение между ключами.
ssh-keygen:-генераций ключа SHH для последующего подлючения.
cat /home/andrey/.ssh/id_rsa.pub:-путь ключа Linux
git clone путьSSHвgithub папка_сохранения:-Клонирование репозита на локальную машину
git push:-Загрузка в удалённый репозит.
git push -u origin имя_ветки:-загрузка с созданием ветки.
git push --gelete origin ветка:-Удаление веток из удалённого репозита.
git push --force:- принудительная запись в уд репозит.
git pull:-Выгрузка из репозита.
git fetch:-Подгрузить обновления из репозита.
